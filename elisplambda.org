* Y Combinator in elisp

#+BEGIN_SRC emacs-lisp
  (defun Y-combinator (f) ((lambda (x) (funcall x x)) 
                           (lambda (x)
                             (funcall f (lambda (&rest g)
                                          (apply (funcall x x) g))))))
#+END_SRC

#+RESULTS:
: Y-combinator

Do all but the final two exercises --- 18.8.4 and 18.8.5

* Base Code
#+BEGIN_SRC elisp :results silent :lexical t
    (fset 'I (set 'I (lambda (x) x)))

    (fset 'Z (set 'Z (lambda (x) (lambda (y) y))))

    (fset 'S
          (set 'S
               (lambda (a)
                 (lambda (b)
                   (lambda (c)
                     (funcall b
                              (funcall
                                 (funcall a b) c)))))))

  (fset 'ADD
        (set 'ADD
             (lambda (a)
               (lambda (b) (funcall (funcall a S) b)))))

  (fset 'MUL
        (set 'MUL
             (lambda (a)
               (lambda (b)
                 (lambda (c)
                   (funcall a (funcall b) c))))))

  (fset 'TRUE
        (set 'TRUE
             (lambda (a)
               (lambda (b)
                       a))))

  (fset 'FALSE
        (set 'FALSE
             (lambda (a)
               (lambda (b)
                 b))))

  (fset 'NOT
        (set 'NOT
             (lambda (a)
               (funcall (funcall a FALSE) TRUE))))

  (fset 'AND
        (set 'AND
             (lambda (a)
                (lambda (b)
                   (funcall (funcall a b) a)))))


  (fset 'OR
        (set 'OR
             (lambda (a)
               (lambda (b) 
                 (funcall (funcall a a) b)))))

  (fset 'ZP
        (set 'ZP
            (lambda (a)
                    (funcall (funcall (funcall a FALSE) NOT) FALSE))))

  (fset 'PAIR 
       (set 'PAIR
            (lambda (x)
                (lambda (y)
                    (lambda (f)
                       (funcall (funcall f x) y))))))

  (fset 'FIRST
       (set 'FIRST
            (lambda (p) (funcall p TRUE))))

  (fset 'SECOND
       (set 'SECOND
            (lambda (p) (funcall p FALSE))))

  (fset 'Y
       (set 'Y
          (lambda (f) 
             ((lambda (x) (funcall x x)
              (lambda (x) (funcall f (lambda (&rest v)
                                     (apply (funcall x x) v)))))))))

#+END_SRC
#+BEGIN_SRC elisp :results silent 

  (defun lambda-to-bool (b)
     (funcall (funcall b t) nil))

  
  (defun bool-to-lambda (b)
     (if b
         TRUE
       FALSE))


  (defun church-to-nat (c)
  (funcall (funcall c '1+) 0))

  (defun nat-to-church (n)
     (if (zerop n)
        Z
        (funcall S (nat-to-church (1- n)))))

  (defun lambda-s (x)
     (1+ x))

  (defun lambda-add (x y)
     (if (zerop y)
        x
     (lambda-s (lambda-add x (1- y)))))

  (defun lambda-mul (x y)
     (if (= 1 y)
        x
       (lambda-add x (lambda-mul x (1- y)))))

  (defun lambda-ex (x y)
     (if (zerop y)
        1
      (if (= 1 y)
          x
        (lambda-mul x (lambda-ex x (1- y)))))) 
#+END_SRC

#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall AND TRUE) FALSE))
(bool-to-lambda nil)
#+END_SRC


* Exercises
** DONE Exercise 18.5.1
   CLOSED: [2019-04-01 Mon 18:57]
#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall (funcall PAIR TRUE) FALSE) AND))
#+END_SRC

#+RESULTS:
t


** DONE Exercise 18.5.2
   CLOSED: [2019-04-01 Mon 19:07]

#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall (funcall PAIR TRUE) FALSE) OR))
#+END_SRC

#+RESULTS:
t

