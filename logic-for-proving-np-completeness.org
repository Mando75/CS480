#+TITLE: Logic for Proving NP-Completeness
#+AUTHOR: Rick Neff
#+EMAIL: NeffR@byui.edu
#+DATE: 18 March 2019
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t ':t |:t
#+OPTIONS: html-postamble:t
#+STARTUP: showeverything entitiespretty inlineimages
#+SETUPFILE: theme-bigblow.setup

#+BEGIN_SRC emacs-lisp :results silent
  (byte-compile-disable-warning 'cl-functions)
#+END_SRC

  How do we use propositional logic to do NP-Completeness proofs?
* DONE First Understand An Elisp Implementation of Boolean Formulas
  CLOSED: [2019-03-18 Mon 14:00]
  A literal is a symbol with a value of 1 or 0.

  A clause is a list of literals. 

  A formula a list of clauses. For now, assume a formula is in Conjunctive
  Normal Form (CNF --- aka Product of Sums).

  So '((a b c) (a (b) c) ((a) (b) c)) represents three clauses containing three
  literals each where the literals are or\rsquo{}ed together (added) while the clauses
  are and\rsquo{}ed together (multiplied).

  An assignment is a setting of 1 (true) or 0 (false) to each literal in the
  formula. Using an association-list for assignments, the car of each pair is
  the symbol, the cdr its value, e.g., '((a . 1) (b . 0) (c . 1)) will be used
  as the assignment (equivalent to =(setq a 1 b 0 c 1)=) to give the literal
  \lsquo{}a\rsquo{} the value 1, \lsquo{}b\rsquo{} the value 0, and \lsquo{}c\rsquo{} the value 1. But first the symbols
  \lsquo{}a\rsquo{}, \lsquo{}b\rsquo{} and \lsquo{}c\rsquo{} must be made into literals, with the ability to be negated.

  A negated literal is a function with that literal\rsquo{}s name returning the
  literal\rsquo{}s symbol\rsquo{}s negated value (arithmetized, so treating 0 and 1 as
  numbers standing in for false and true):

#+BEGIN_SRC emacs-lisp :results silent
  (defun make-literal (symbol)
    (unless (fboundp symbol)
      (fset symbol `(lambda nil (- 1 (symbol-value (quote ,symbol))))))
    (unless (boundp symbol)
      (set symbol 0)) ; default value
    symbol)
#+END_SRC

  Create the above sample formula to experiment with:
#+BEGIN_SRC elisp :results raw
  (setq formula1 '((a b c) (a (b) c) ((a) (b) c)))
#+END_SRC

#+RESULTS:
((a b c) (a (b) c) ((a) (b) c))

  Make a list of literals given the formula they appear in:
#+BEGIN_SRC emacs-lisp :results silent
  (defun literals (formula)
    (mapcar 'make-literal
            (remove-duplicates
             (mapcar
              (lambda (x)
                (if (consp x)
                    (car x)
                  x))
              (apply 'append formula)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results raw
  (literals formula1)
#+END_SRC

  Flip (invert) the value of a literal (symbol), to turn a 0 into a 1 and a 1
  into a 0. Might come in handy!
#+BEGIN_SRC emacs-lisp :results silent
  (defun flip (sym)
    (set sym (if (zerop (symbol-value sym)) 1 0)))
#+END_SRC    

#+BEGIN_SRC elisp :results raw
  (flip 'a)
#+END_SRC

  A formula is evaluated with the current values of the literals, or else the
  literals are set first from the optional assignment association list. The
  evaluation gives 1 for true, or 0 for false. 
#+BEGIN_SRC emacs-lisp :results silent
  (defun eval-cnf-formula (formula &optional assignment)
    (mapc (lambda (pair) (set (car pair) (cdr pair))) assignment)
    (if (zerop (apply '*
                      (mapcar
                       (lambda (x)
                         (apply '+
                                (mapcar
                                 (lambda (s)
                                   (eval s)) x)))
                       formula)))
        0
     (prog1 1 (put 'get-assignment :satisfied assignment))))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (eval-cnf-formula formula1) 
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (eval-cnf-formula '((a b (c)) ((a) (b) c) ((a) b (c))) '((a . 1) (b . 0) (c . 1)))
#+END_SRC

  With no change in syntax, the formula can also be evaluated as if it were in
  Disjunctive Normal Form (DNF --- aka Sum of Products):
#+BEGIN_SRC emacs-lisp :results silent
  (defun eval-dnf-formula (formula &optional assignment)
    (mapc (lambda (pair) (set (car pair) (cdr pair))) assignment)
    (if (zerop (apply '+
                      (mapcar
                       (lambda (x)
                         (apply '*
                                (mapcar
                                 (lambda (s)
                                   (eval s)) x)))
                       formula)))
        0
     1))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (eval-dnf-formula formula1)
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (eval-dnf-formula '((a b (c)) ((a) (b) c) ((a) b (c))) '((a . 0) (b . 0) (c . 1)))
#+END_SRC

  We will make CNF the default way to view a formula:
#+BEGIN_SRC emacs-lisp :results silent
  (defalias 'eval-formula 'eval-cnf-formula)
#+END_SRC

  We need a way to get an assignment from a number rendered in binary:
#+BEGIN_SRC emacs-lisp :results silent
  (defun to-binary (n)
    (let ((d (/ n 2)) 
          (m (% n 2)))
      (if (= d 0)
          (list m) 
        (append (to-binary d) (list m)))))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (to-binary 5)
#+END_SRC

  But we need to pad the bits with 0s to give as many bits as there are literals:
#+BEGIN_SRC emacs-lisp :results silent
  (defun pad (list-of-bits n)
    (append (make-list (- n (length list-of-bits)) 0) list-of-bits)) 
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (pad (to-binary 5) 8)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  (defun get-assignment (list-of-literals n)
    (let* ((len (length list-of-literals))
           (bits-of-n (pad (to-binary n) len))
           (shared-assignment (get 'get-assignment :shared)))
      (unless shared-assignment
        (setq shared-assignment
              (put 'get-assignment :shared
                   (mapcar* 'cons list-of-literals bits-of-n))))
      (loop for pair in shared-assignment
            for val in bits-of-n
            do (setcdr pair val))
      shared-assignment))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (get-assignment '(a b c) 6)
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (get 'get-assignment :shared)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  (defun get-all-possible-assignments (list-of-literals)
    (loop with n = (length list-of-literals)
          for i from 0 below (expt 2 n)
          collect (mapcar* 'cons list-of-literals (pad (to-binary i) n))))
#+END_SRC

#+BEGIN_SRC elisp :results value
  (get-all-possible-assignments '(a b c))
#+END_SRC

  We are interested in knowing if there is an assignment that will \ldquo{}satisfy\rdquo
  (make true) a given formula:
#+BEGIN_SRC emacs-lisp :results silent
  (defun is-satisfiable (formula)
    (some (lambda (assignment)
            (= 1 (eval-formula formula assignment)))
          (get-all-possible-assignments (literals formula))))
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (is-satisfiable formula1)
#+END_SRC

#+BEGIN_SRC elisp :results raw
  (get 'get-assignment :satisfied)
#+END_SRC

  Save time and memory by using the \ldquo{}shared\rdquo feature of =get-assignment=:
#+BEGIN_SRC emacs-lisp :results silent
  (defun is-satisfiable-faster (formula)
    (let ((ll (literals formula)))
      (loop for i from 0 below (expt 2 (length ll))
            thereis (= 1 (eval-formula formula (get-assignment ll i))))))
#+END_SRC

  We also may want to know all satisfying assignments for a given formula.
#+BEGIN_SRC emacs-lisp :results silent
  (defun get-all-satisfying-assignments (formula)
    (loop for assignment in (get-all-possible-assignments (literals formula))
          when (= 1 (eval-formula formula assignment))
          collect assignment))
#+END_SRC

  But more likely we will be satisfied with one:
#+BEGIN_SRC emacs-lisp :results silent
  (defun get-one-satisfying-assignment (formula)
    (loop for assignment in (get-all-possible-assignments (literals formula))
          when (= 1 (eval-formula formula assignment))
          return assignment))
#+END_SRC

#+BEGIN_SRC elisp :results value
  (get-all-satisfying-assignments formula1)
#+END_SRC

  What about DNF?
#+BEGIN_SRC elisp :results value
  (defalias 'eval-formula 'eval-dnf-formula)
  (get-all-satisfying-assignments formula1)
#+END_SRC

  We can profitably use the [[https://msoos.github.io/cryptominisat_web/][SAT solver CryptoMiniSat by Mate Soos]], which
  requires the [[https://en.wikipedia.org/wiki/DIMACS][DIMACS]] format:
#+BEGIN_SRC emacs-lisp :results silent
  (defun to-dimacs (formula)
    (let* ((num-clauses (length formula))
           (ll (literals formula))
           (num-literals (length ll))
           (literals-as-numbers nil))
      (loop for literal in ll
            for n from 1
            do (setf (alist-get literal literals-as-numbers) n))
      (concat (format "p cnf %d %d\n" num-literals num-clauses)
              (mapconcat (lambda (clause)
                           (mapconcat (lambda (literal)
                                        (let ((negated ""))
                                          (when (consp literal)
                                            (setq literal (car literal)
                                                  negated "-"))
                                          (format "%s%d" negated
                                                  (alist-get literal literals-as-numbers))))
                                      clause " "))
                         formula " 0\n")
              " 0 \n")))

  (defun write-dimacs-file (formula filename)
    (write-region (to-dimacs formula) 0 filename))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (kill-new (to-dimacs formula1))
#+END_SRC

* Next Look at Simple Connected Graphs
  of [[https://commons.wikimedia.org/wiki/Category:Graph_coloring;_vertex][Chromaticity]] 3 (maybe?).

  Transform any such graph G with nodes n_1, n_2, \dots n_m into a CNF Boolean formula
  by setting the variables:
#+BEGIN_SRC elisp :results silent
  (setq r_i (if (is-red n_i) 1 0)
        g_i (if (is-green n_i) 1 0)
        b_i (if (is-blue n_i) 1 0))
#+END_SRC

  Then for each node generate the clause =(r_i g_i b_i)=, and for each link
  =(n_i . n_j)= generate the three clauses =((r_i) (r_j))=, =((g_i) (g_j))= and
  =((b_i) (b_j))=.

  A graph with m nodes can be thus transformed in no more than m^2 steps.

  The trick: a graph is three-colorable (has chromaticity 3) *if and only if*
  the generated-by-this-transformation Boolean formula is *satisfiable*.

[[elisp:(org-babel-load-file%20"logic-for-proving-np-completeness.org")][Load the Code]]

  Play with some simple graphs with no more than 5 nodes. Then see what you can
  determine about the chromaticity of the two below graphs with formulas
  =graph1-formula= and =graph2-formula=:

#+BEGIN_SRC elisp :results silent
(setq graph1-formula (quote (
    (r1 g1 b1)
    (r2 g2 b2)
    (r3 g3 b3)
    (r4 g4 b4)
    (r5 g5 b5)
    (r6 g6 b6)
    (r7 g7 b7)

    ((r1) (r2))
    ((g1) (g2))
    ((b1) (b2))

    ((r1) (r5))
    ((g1) (g5))
    ((b1) (b5))

    ((r1) (r6))
    ((g1) (g6))
    ((b1) (b6))

    ((r2) (r3))
    ((g2) (g3))
    ((b2) (b3))

    ((r2) (r6))
    ((g2) (g6))
    ((b2) (b6))

    ((r2) (r7))
    ((g2) (g7))
    ((b2) (b7))

    ((r3) (r4))
    ((g3) (g4))
    ((b3) (b4))

    ((r3) (r7))
    ((g3) (g7))
    ((b3) (b7))

    ((r4) (r5))
    ((g4) (g5))
    ((b4) (b5))

    ((r4) (r6))
    ((g4) (g6))
    ((b4) (b6))

    ((r5) (r7))
    ((g5) (g7))
    ((b5) (b7))
    )))
#+END_SRC

#+BEGIN_SRC elisp :results raw
(literals graph1-formula)
#+END_SRC

#+RESULTS:
(r1 g1 b1 r2 g2 b2 r3 g3 b3 r4 r6 g4 g6 b4 b6 r5 r7 g5 g7 b5 b7)

#+BEGIN_SRC elisp :results code 
  (and (is-satisfiable-faster graph1-formula)
       (get-one-satisfying-assignment graph1-formula))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC elisp
((r1 . 0)
 (g1 . 0)
 (b1 . 0)
 (r2 . 0)
 (g2 . 0)
 (b2 . 0)
 (r3 . 0)
 (g3 . 0)
 (b3 . 0)
 (r4 . 0)
 (r6 . 0)
 (g4 . 0)
 (g6 . 0)
 (b4 . 0)
 (b6 . 0)
 (r5 . 0)
 (r7 . 0)
 (g5 . 0)
 (g7 . 0)
 (b5 . 0)
 (b7 . 0))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (setq graph2-formula (quote (
    (r1 g1 b1)
    (r2 g2 b2)
    (r3 g3 b3)
    (r4 g4 b4)
    (r5 g5 b5)
    (r6 g6 b6)
    (r7 g7 b7)

    ((r1) (r2))
    ((g1) (g2))
    ((b1) (b2))

    ((r1) (r5))
    ((g1) (g5))
    ((b1) (b5))

    ((r1) (r6))
    ((g1) (g6))
    ((b1) (b6))

    ((r2) (r3))
    ((g2) (g3))
    ((b2) (b3))

    ((r2) (r6))
    ((g2) (g6))
    ((b2) (b6))

    ((r2) (r7))
    ((g2) (g7))
    ((b2) (b7))

    ((r3) (r4))
    ((g3) (g4))
    ((b3) (b4))

    ((r3) (r7))
    ((g3) (g7))
    ((b3) (b7))

    ((r4) (r5))
    ((g4) (g5))
    ((b4) (b5))

    ((r4) (r7))
    ((g4) (g7))
    ((b4) (b7))

    ((r5) (r6))
    ((g5) (g6))
    ((b5) (b6))
    )))
#+END_SRC

#+BEGIN_SRC elisp :results raw 
  (and (is-satisfiable-faster graph2-formula)
       (get-all-satisfying-assignments graph2-formula))
#+END_SRC
