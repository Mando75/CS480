#+TITLE: Week 11 Workbook
#+AUTHOR: Bryan Muller
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t ':t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty inlineimages


* Y Combinator in elisp

#+BEGIN_SRC emacs-lisp
  (defun Y-combinator (f) ((lambda (x) (funcall x x)) 
                           (lambda (x)
                             (funcall f (lambda (&rest g)
                                          (apply (funcall x x) g))))))
#+END_SRC

#+RESULTS:
: Y-combinator

Do all but the final two exercises --- 18.8.4 and 18.8.5

* Base Code
#+BEGIN_SRC elisp :results silent :lexical t
    (fset 'I (set 'I (lambda (x) x)))

    (fset 'Z (set 'Z (lambda (x) (lambda (y) y))))

    (fset 'S
          (set 'S
               (lambda (a)
                 (lambda (b)
                   (lambda (c)
                     (funcall b
                              (funcall
                                 (funcall a b) c)))))))

  (fset 'ADD
        (set 'ADD
             (lambda (a)
               (lambda (b) (funcall (funcall a S) b)))))

  (fset 'MUL
        (set 'MUL
             (lambda (a)
               (lambda (b)
                 (lambda (c)
                    (funcall a (funcall b c)))))))

  (fset 'TRUE
        (set 'TRUE
             (lambda (a)
               (lambda (b)
                       a))))

  (fset 'FALSE
        (set 'FALSE
             (lambda (a)
               (lambda (b)
                 b))))

  (fset 'NOT
        (set 'NOT
             (lambda (a)
               (funcall (funcall a FALSE) TRUE))))

  (fset 'AND
        (set 'AND
             (lambda (a)
                (lambda (b)
                   (funcall (funcall a b) a)))))


  (fset 'OR
        (set 'OR
             (lambda (a)
               (lambda (b) 
                 (funcall (funcall a a) b)))))

  (fset 'ZP
        (set 'ZP
            (lambda (a)
                    (funcall (funcall (funcall a FALSE) NOT) FALSE))))

  (fset 'PAIR 
       (set 'PAIR
            (lambda (x)
                (lambda (y)
                    (lambda (f)
                       (funcall (funcall f x) y))))))

  (fset 'FIRST
       (set 'FIRST
            (lambda (p) (funcall p TRUE))))

  (fset 'SECOND
       (set 'SECOND
            (lambda (p) (funcall p FALSE))))

  (fset 'Y
       (set 'Y
          (lambda (f) 
             ((lambda (x) (funcall x x)
              (lambda (x) (funcall f (lambda (&rest v)
                                     (apply (funcall x x) v)))))))))

#+END_SRC
#+BEGIN_SRC elisp :results silent 

  (defun lambda-to-bool (b)
     (funcall (funcall b t) nil))

  
  (defun bool-to-lambda (b)
     (if b
         TRUE
       FALSE))


  (defun church-to-nat (c)
  (funcall (funcall c '1+) 0))

  (defun nat-to-church (n)
     (if (zerop n)
        Z
        (funcall S (nat-to-church (1- n)))))

  (defun lambda-s (x)
     (1+ x))

  (defun lambda-add (x y)
     (if (zerop y)
        x
     (lambda-s (lambda-add x (1- y)))))

  (defun lambda-mul (x y)
     (if (zerop y)
         0
       (if (= 1 y)
          x
         (lambda-add x (lambda-mul x (1- y))))))

  (defun lambda-ex (x y)
     (if (zerop y)
        1
      (if (= 1 y)
          x
        (lambda-mul x (lambda-ex x (1- y)))))) 
#+END_SRC

#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall AND TRUE) FALSE))
(bool-to-lambda nil)
#+END_SRC


* Exercises
** DONE Exercise 18.4.1
   CLOSED: [2019-04-03 Wed 19:46]
   ADD applies the successor function repeatedly until the numbers have been added.
   MUL does the same, although instead of repeating the successor function, it
   repeats the addition function.
** Exercise 18.4.2
#+BEGIN_SRC elisp
(church-to-nat (funcall (funcall MUL (nat-to-church 4)) (nat-to-church 8)))
#+END_SRC

#+RESULTS:
: 32

** DONE Exercise 18.5.1
   CLOSED: [2019-04-01 Mon 18:57]
#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall (funcall PAIR TRUE) FALSE) AND))
#+END_SRC

#+RESULTS:
t

** DONE Exercise 18.5.2
   CLOSED: [2019-04-01 Mon 19:07]

#+BEGIN_SRC elisp :results raw
(lambda-to-bool (funcall (funcall (funcall PAIR TRUE) FALSE) OR))
#+END_SRC

#+RESULTS:
t

** DONE Exercise 18.8.1 
   CLOSED: [2019-04-03 Wed 19:41]

A fixpoint combinator is a combinator /E/ such that for any lambda expression
/G/, the identity (/EG/) = /G/(/EG/) holds. There are an infinite number of
fixpoint combinators. 


\textit{Y} = (\lambda f.(\lambda x. f(x x))(\lambda x. f(x x)))
\textit{Y_e} = (\lambda f.(\lambda x.(x x))(\lambda y.f(\lambda v. ((y y) v))))
lambda f:(lambda x:x(x))(lambda y:f(lambda v:y(y)(v)))

EG = (\lambda f.(\lambda x. (x x))(\lambda y.f(\lambda v. ((y y) v))))G

   = (\lambda f.(\lambda x.x x) (\lambda y.f (\lambda v. y y v)))G
 
   = (\lambda f.(\lambda y.f (\lambda v.y y v))(\lambda y.f (\lambda v. y y v)))G

   = (\lambda y.G(\lambda v. y y v))(\lambda y.G(\lambda v. y y v ))

   = G(\lambda v. (\lambda y.G(\lambda v. y y v ))(\lambda y.G(\lambda v. y y v )) v)
 
   = G (\lambda y.G(\lambda v. y y v))(\lambda y.G(\lambda v. y y v))

   thus /EG/ = /G/(/EG/) and Y_e is a fixpoint combinator

** DONE Exercise 18.8.2
   CLOSED: [2019-04-03 Wed 13:44]

#+BEGIN_SRC python :results output
  # Below, for clarity, we use don't use Church numerals..
  # The Ye -- eager Y combinator

  Ye = lambda f: (lambda x: x(x))(lambda y: f(lambda v: y(y)(v)))
  # Pre-Factorial: performs the product of 
  # a natural number and all natural number less than it
  # We call it pre-factorial because we need to apply
  # Y to it to obtain the real factorial

  prefact = lambda fact: lambda n: (1 if n==0 else n*fact(n-1))

  # Pre-sum: sums all the natural numbers less than the given number

  presum = lambda f: lambda n: (0 if n==0 else n+f(n-1))

  # Pre-Fib: returns the nth number of the series defined by 
  # the following definitions
  #  the first two numbers are 1 and 1
  #  the next number is defined as the sum of the prior two numbers

  prefib = lambda f: lambda n: 0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2))

  fact = lambda n: Ye(prefact)(n)
  sum = lambda n: Ye(presum)(n)

  print("fact examples")
  print(fact(3))
  print(fact(5))
  print(fact(8))
  print("Sum examples")
  print(sum(3))
  print(sum(5))
  print(sum(8))
#+END_SRC

#+RESULTS:
: fact examples
: 6
: 120
: 40320
: Sum examples
: 6
: 15
: 36

** DONE Exercise 18.8.3
   CLOSED: [2019-04-03 Wed 13:44]
Y_e is a fixed-point function due to Tennent's correspondence principle. 
Breaking down Y_e, we see that it is very similar to Y. The difference being that
instead of evaluating the second \lambda x. f(x x) immedeiatly, we defer it into
another wrapped lambda. This is essentially a no-op, as all it does it place the
order of the inner function further back in queue for evalutation. This is why
the applicative (eager) Y combinator works with eager languages. Instead of
returning a "value" it returns another layered function. This means that eager
languages will stop evaluation there, preventing an infinite loop of self
evalutation. 


